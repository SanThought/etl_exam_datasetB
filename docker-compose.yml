version: "3.8"

services:
  neo4j:
    build:
      context: ./neo4j_custom
    container_name: neo4j_db
    ports:
      - "7474:7474"
      - "7687:7687"
    environment:
      - NEO4J_AUTH=${NEO4J_AUTH}
    volumes:
      - neo4j_data:/data
      - ./neo4j:/var/lib/neo4j/import
    networks:
      - backend_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:7474"]
      interval: 30s
      retries: 5

  postgres:
    image: postgres:14
    container_name: postgres_db
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - pg_data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - backend_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 30s
      retries: 5

  api_etl:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: api_etl
    depends_on:
      neo4j:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      - NEO4J_URI=bolt://neo4j_db:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}
      - POSTGRES_HOST=postgres_db
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
    volumes:
      - ./output:/usr/src/app/output
    ports:
      - "3000:3000"
    networks:
      - backend_network
    # Uncomment healthcheck if desired:
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
    #   interval: 30s
    #   retries: 5

networks:
  backend_network:

volumes:
  neo4j_data:
  pg_data:
